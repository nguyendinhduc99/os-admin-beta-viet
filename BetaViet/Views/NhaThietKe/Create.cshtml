@model BetaViet.Models.NhaThietKe

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Tạo mới</h1>

<h4>Nhà thiết kế</h4>
<hr />
<div class="row">
    <div class="col-md-12">
        <form asp-action="Create" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <section id="vueApp">
                @*<div class="form-group">
                    <label asp-for="DonViThanhVien" class="control-label"></label>
                    <select asp-for="DonViThanhVienId" class="form-control">
                    </select>
                    <span asp-validation-for="DonViThanhVienId" class="text-danger"></span>
                </div>*@
                <div class="form-group">
                    <label asp-for="DonViThietKe" class="control-label"></label>
                    <select asp-for="DonViThietKeId" class="form-control">
                    </select>
                    <span asp-validation-for="DonViThietKeId" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Name" class="control-label"></label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Position" class="control-label"></label>
                    <input asp-for="Position" class="form-control" />
                    <span asp-validation-for="Position" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Description" class="control-label"></label>
                    <div class="editor"></div>
                    <input type="hidden" asp-for="Description" class="form-control" />
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Avatar" class="control-label"></label>
                    <input type="file" name="Avatar1" class="form-control" />
                    <span asp-validation-for="Avatar" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="PropertiesJSON" class="control-label"></label>
                    <input type="hidden" asp-for="PropertiesJSON" class="form-control" />
                    <div class="p-0 row">
                        <aside class="col-3" v-for="(item,i) in properties">
                            <div class="d-flex align-items-center justify-content-between mb-1 badge badge-secondary">
                                <span>
                                    {{item.name}}: <b>{{item.value}}</b>
                                </span>
                                <button class="btn btn-sm m-0 p-0 px-1" @@click.prevent.stop="onPropertyRemoved(i)">
                                    <i class="ti-minus"></i>
                                </button>
                            </div>
                        </aside>
                    </div>
                    <div class="form-group input-group">
                        <input type="text" class="form-control" placeholder="Tên" v-model="addingProperty.name">
                        <input type="text" class="form-control" placeholder="Giá trị" v-model="addingProperty.value">
                        <div class=" input-group-addon">
                            <button class="btn" @@click.prevent.stop="onPropertyAdded">
                                <i class="ti-plus"></i>
                            </button>
                        </div>
                    </div>
                    <span asp-validation-for="PropertiesJSON" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="FiltersJSON" class="control-label"></label>
                    <input type="hidden" asp-for="FiltersJSON" class="form-control" />
                    <div class="p-0 row">
                        <aside class="col-3" v-for="(item,i) in filters">
                            <div class="d-flex align-items-center justify-content-between mb-1 badge badge-secondary">
                                <span>
                                    {{item.name}}: <b>{{item.value}}</b>
                                </span>
                                <button class="btn btn-sm m-0 p-0 px-1" @@click.prevent.stop="onFilterRemoved(i)">
                                    <i class="ti-minus"></i>
                                </button>
                            </div>
                        </aside>
                    </div>
                    <div class="form-group input-group" style="z-index: 5;">
                        <select class="form-control w-50" v-model="addingFilter.name">
                            <option v-for="x in standardFilters" :value="x.name">{{x.name}}</option>
                        </select>
                        @*<input type="text" class="form-control" placeholder="Tên" v-model="addingFilter.name">*@
                        @*<select class="form-control" v-model="addingFilter.value">
                    <option v-for="x in standardFilterValues" :value="x">{{x}}</option>
                </select>*@
                        <vue-multiselect v-model="addingFilter.value" tag-placeholder="Giá trị" placeholder="" :options="standardFilterValues" :multiple="true" :taggable="true"></vue-multiselect>

                        @*<input type="text" class="form-control" placeholder="Giá trị" v-model="addingFilter.value">*@
                        <div class=" input-group-addon">
                            <button class="btn" @@click.prevent.stop="onFilterAdded">
                                <i class="ti-plus"></i>
                            </button>
                        </div>
                    </div>
                    <span asp-validation-for="FiltersJSON" class="text-danger"></span>
                </div>
                @*<div class="form-group">
            <label asp-for="CreatedOn" class="control-label"></label>
            <input asp-for="CreatedOn" class="form-control" />
            <span asp-validation-for="CreatedOn" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="ModifiedOn" class="control-label"></label>
            <input asp-for="ModifiedOn" class="form-control" />
            <span asp-validation-for="ModifiedOn" class="text-danger"></span>
        </div>
        <div class="form-group form-check">
            <label class="form-check-label">
                <input class="form-check-input" asp-for="IsDeleted" /> @Html.DisplayNameFor(model => model.IsDeleted)
            </label>
        </div>*@
            </section>
            <div class="form-group">
                <input type="submit" value="Tạo mới" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Quay lại danh sách</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/lib/ckeditor5/build/ckeditor.js"></script>
    <script src="/lib/vue-multiselect/vue-multiselect.min.js"></script>
    <link rel="stylesheet" href="/lib/vue-multiselect/vue-multiselect.min.css">
    <script>
        $(document).ready(function () {

            ClassicEditor
                .create(document.querySelector('.editor'), ckeditor5Options)
                .then(editor => {
                    window.editor = editor;

                    editor.model.document.on('change', () => {
                        console.log('the data has changed!');
                        $("[name=Description]").val(editor.getData());
                    });
                    //editor.editing.view.document.on('keydown', (evt, data) => {
                    //    console.log(data);

                    //});
                })
                .catch(error => {
                    console.error('Oops, something went wrong!');
                    console.error('Please, report the following error on https://github.com/ckeditor/ckeditor5/issues with the build id and the error stack trace:');
                    console.warn('Build id: iydo686yl1oa-qrolc6ajm7ow');
                    console.error(error);
                });

            //$.get("/api/DonViThanhVien").then(x => {
            //    $("[name=DonViThanhVienId]").append("<option></option>");
            //    for (let item of x) {
            //        $("[name=DonViThanhVienId]").append(`<option value="${item.id}">${item.name}</option>`);
            //    }
            //    $("[name=DonViThanhVienId]").val($("[name=DonViThanhVienId]").attr("data-val"));
            //})
            $.get("/api/DonViThietKe").then(x => {
                $("[name=DonViThietKeId]").append("<option></option>");
                for (let item of x) {
                    $("[name=DonViThietKeId]").append(`<option value="${item.id}">${item.name}</option>`);
                }
                $("[name=DonViThietKeId]").val($("[name=DonViThietKeId]").attr("data-val"));
            })
        })
    </script>

    <script>
        Vue.component('vue-multiselect', window.VueMultiselect.default)
        var app = new Vue({
            el: '#vueApp',
            data: {

                addingProperty: {},
                properties: [],
                addingFilter: {},
                filters: [],


                standardFilters: [],
                standardFilterValues: []
            },
            watch: {
                "addingFilter.name"(newVal, oldVal) {
                    console.log('watch addingFilter.name: ', newVal);
                    this.standardFilterValues = _.get(this.standardFilters.find(x => x.name == newVal), 'values', []);
                }
            },
            computed: {

            },
            methods: {


                onPropertyAdded() {
                    this.properties.push(this.addingProperty);
                    this.addingProperty = {};

                    $("[name=PropertiesJSON]").val(JSON.stringify(this.properties));
                },
                onPropertyRemoved(i) {
                    this.properties.splice(i, 1);

                    $("[name=PropertiesJSON]").val(JSON.stringify(this.properties));
                },

                onFilterAdded() {
                    this.filters.push(this.addingFilter);
                    this.addingFilter = {};

                    $("[name=FiltersJSON]").val(JSON.stringify(this.filters));
                },
                onFilterRemoved(i) {
                    this.filters.splice(i, 1);

                    $("[name=FiltersJSON]").val(JSON.stringify(this.filters));
                },

            },
            mounted() {
                $.getJSON('/api/boloc?page=2').then(x => {
                    console.log(x);
                    this.standardFilters = x.map(y => ({
                        name: y.name,
                        values: [...y.values, ...(y.dropdownValues || [])]
                    }));
                })
            }
        })
    </script>
}
