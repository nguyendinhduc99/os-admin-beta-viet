@model BetaViet.Models.DichVuThiCong

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <style>
        .editor1 ~ .ck .ck-editor__editable {
            height: 800px;
        }
    </style>
}

<h1>Sửa</h1>

<h4>Kiến thức</h4>
<hr />
<div class="row">
    <div class="col-md-12">
        <form asp-action="Edit" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="ModifiedOn" class="control-label"></label>
                <input asp-for="ModifiedOn" class="form-control" />
                <span asp-validation-for="ModifiedOn" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Page" class="control-label"></label>
                <select asp-for="Page" class="form-control" data-val="@Model.Page" onchange="onPageChanged()"></select>
            </div>
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" onblur="slugVueApp.onTitleBlur(event)" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            @*<div class="form-group">
            <label asp-for="Avatar" class="control-label"></label>
            <input type="hidden" asp-for="Avatar" class="form-control" />
            <img src="@Model.Avatar" class="rounded" style=" width: 100px;">
            <input type="file" name="Avatar1" class="form-control" />
            <span asp-validation-for="Avatar" class="text-danger"></span>
        </div>*@
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <div class="editor">
                    @Html.Raw(Model.Description)
                </div>
                <input type="hidden" asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Content" class="control-label"></label>
                <div class="editor1">
                    @Html.Raw(Model.Content)
                </div>
                <input type="hidden" asp-for="Content" class="form-control" />
                <span asp-validation-for="Content" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="NhaThietKe" class="control-label"></label>
                <select asp-for="NhaThietKeId" class="form-control" data-val="@Model.NhaThietKeId"></select>
                <span asp-validation-for="NhaThietKeId" class="text-danger"></span>
            </div>

            <partial name="~/Views/Shared/_PartialSEO.cshtml" />
            <partial name="~/Views/Shared/_CommonSlugVueAppPartial.cshtml" />
            <input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="CreatedOn" />

            <div class="form-group">
                <input type="submit" value="Lưu" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Quay lại</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/lib/ckeditor5/build/ckeditor.js"></script>
    <script src="~/main-menu.js"></script>
    <script>
        $(document).ready(function () {

            ClassicEditor
                .create(document.querySelector('.editor'), ckeditor5Options)
                .then(editor => {
                    window.editor = editor;

                    editor.model.document.on('change', () => {
                        console.log('the data has changed!');
                        $("[name=Description]").val(editor.getData());
                    });
                    //editor.editing.view.document.on('keydown', (evt, data) => {
                    //    console.log(data);

                    //});
                })
                .catch(error => {
                    console.error('Oops, something went wrong!');
                    console.error('Please, report the following error on https://github.com/ckeditor/ckeditor5/issues with the build id and the error stack trace:');
                    console.warn('Build id: iydo686yl1oa-qrolc6ajm7ow');
                    console.error(error);
                });

            ClassicEditor
                .create(document.querySelector('.editor1'), ckeditor5Options)
                .then(editor => {
                    window.editor = editor;

                    editor.model.document.on('change', () => {
                        console.log('the data has changed!');
                        $("[name=Content]").val(editor.getData());
                    });
                    //editor.editing.view.document.on('keydown', (evt, data) => {
                    //    console.log(data);

                    //});
                })
                .catch(error => {
                    console.error('Oops, something went wrong!');
                    console.error('Please, report the following error on https://github.com/ckeditor/ckeditor5/issues with the build id and the error stack trace:');
                    console.warn('Build id: iydo686yl1oa-qrolc6ajm7ow');
                    console.error(error);
                });

            $("[name=Page]").append("<option></option>");
            for (let item of fontendMainMenu.filter(x => x.name == 'Dịch vụ thi công')) {
                $("[name=Page]").append(`<option value="${[item.path].join('')}" data-title="${item.name}">${[item.name].join('/')}</option>`);

                if (item.children) {
                    for (let c1 of item.children) {
                        $("[name=Page]").append(`<option value="${[item.path, c1.path].join('')}" data-title="${c1.name}">${[item.name, c1.name].join(' / ')}</option>`);

                        if (c1.children) {
                            for (let c2 of c1.children) {
                                $("[name=Page]").append(`<option value="${[item.path, c1.path, c2.path].join('')}" data-title="${c2.name}">${[item.name, c1.name, c2.name].join(' / ')}</option>`);
                            }
                        }
                    }
                }
            }
            $("[name=Page]").val($("[name=Page]").attr("data-val"));


            $.get("/api/nhathietke").then(x => {
                $("[name=NhaThietKeId]").append("<option></option>");
                for (let item of x) {
                    $("[name=NhaThietKeId]").append(`<option value="${item.id}">${item.name}</option>`);
                }
                $("[name=NhaThietKeId]").val($("[name=NhaThietKeId]").attr("data-val"));
            });
        })

        function onPageChanged(e) {
            let title = $("[name=Page] option:selected").attr("data-title");
            $("[name=Title]").val(title);
        }
    </script>
}
